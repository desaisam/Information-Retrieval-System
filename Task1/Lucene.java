import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.core.SimpleAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * To create Apache Lucene index in a folder and add files into this index based
 * on the input documents.
 */
public class Lucene {

  private static Analyzer sAnalyzer = new SimpleAnalyzer(Version.LUCENE_47);
  private IndexWriter writer;
  private ArrayList<File> queue = new ArrayList<File>();

  public static void main(String[] args) throws IOException {

    // Modify this path to contain the location of the cacm txt files
    String inputLocation = "cacm/TextFiles";
    String indexLocation = null;
    Lucene indexer = null;

    try {
      // This location stores Index files generated by Lucene
      indexLocation = "LuceneIndexFiles";

      // Remove any existing index, create fresh ones.
      File indexDirectory = new File(indexLocation);
      if (indexDirectory.isDirectory()) {
        for (File f : indexDirectory.listFiles()) {
          if (f.exists()) {
            f.delete();
          }
        }
      }

      // Initialize the indexer.
      indexer = new Lucene(indexLocation);

      // Add files into the index
      indexer.indexFileOrDirectory(inputLocation);
    }
    catch (Exception e) {
      System.out.println("Error indexing " + inputLocation + " : "
              + e.getMessage());
    }

    // ===================================================
    // after adding, we always have to call the
    // closeIndex, otherwise the index is not created
    // ===================================================
    indexer.closeIndex();

    // =========================================================
    // Now search
    // =========================================================
    IndexReader reader = DirectoryReader.open(FSDirectory.open
            (new File(indexLocation)));
    IndexSearcher searcher = new IndexSearcher(reader);

    int queryId = 0;
    try {
      // Clean_Query.txt file holds queries that are extracted
      Scanner queryReader = new Scanner(new File("Clean_Query.txt"));
      String fileName2="Lucene_scores.txt";
      BufferedWriter writer2= new BufferedWriter(new FileWriter(fileName2, true));
      writer2.append(' ');
      while (queryReader.hasNextLine()) {
        // Returns top 100 results per query
        TopScoreDocCollector collector = TopScoreDocCollector.create(100, true);
        String queryText = queryReader.nextLine();
        queryId+=1;


        Query query = new QueryParser(Version.LUCENE_47,
                "contents",
                sAnalyzer).parse(queryText);
        searcher.search(query, collector);
        ScoreDoc[] hits = collector.topDocs().scoreDocs;

        // Save the results for each query.
//        System.out.println("Found " + hits.length + " hits.");
        for (int i = 0; i <  Math.min(100, hits.length); ++i) {
          int docId = hits[i].doc;
          Document d = searcher.doc(docId);
          String docName = d.get("filename");
          // Stores result in format and writes to output file
          docName = docName.substring(0, docName.length() - 4);
          String result = queryId + " Q0 " + docName
                  + " " + (i + 1) + " " + hits[i].score + " Lucene\r\n";
          writer2.write(result);
        }


      }
      System.out.println("Found all hits.");
      writer2.close();
      queryReader.close();


    } catch (Exception e) {
      System.out.println("Error : " +e.getMessage());
      e.printStackTrace();
      System.exit(-1);
    }

  }

  /**
   * Constructor
   *
   * @param indexDir
   *            the name of the folder in which the index should be created
   * @throws java.io.IOException
   *             when exception creating index.
   */
  Lucene(String indexDir) throws IOException {

    FSDirectory dir = FSDirectory.open(new File(indexDir));

    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_47, sAnalyzer);

    writer = new IndexWriter(dir, config);
  }

  /**
   * Indexes a file or directory
   *
   * @param fileName
   *            the name of a text file or a folder we wish to add to the
   *            index
   * @throws java.io.IOException
   *             when exception
   */
  public void indexFileOrDirectory(String fileName) throws IOException {
    // ===================================================
    // gets the list of files in a folder (if user has submitted
    // the name of a folder) or gets a single file name (is user
    // has submitted only the file name)
    // ===================================================
    addFiles(new File(fileName));

    int originalNumDocs = writer.numDocs();
    for (File f : queue) {
      FileReader fr = null;
      try {
        Document doc = new Document();

        // ===================================================
        // add contents of file
        // ===================================================
        fr = new FileReader(f);
        doc.add(new TextField("contents", fr));
        doc.add(new StringField("path", f.getPath(), Field.Store.YES));
        doc.add(new StringField("filename", f.getName(), Field.Store.YES));
        writer.addDocument(doc);

//        System.out.println("Added: " + f);
      } catch (Exception e) {
        System.out.println("Could not add: " + f);
      } finally {
        fr.close();
      }
    }
//    System.out.println("Indexed all files.");
    int newNumDocs = writer.numDocs();
    System.out.println("");
    System.out.println("************************");
    System.out
            .println((newNumDocs - originalNumDocs) + " documents indexed.");
    System.out.println("************************");

    queue.clear();
  }

  private void addFiles(File file) {

    if (!file.exists()) {
      System.out.println(file + " does not exist.");
    }
    if (file.isDirectory()) {
      for (File f : file.listFiles()) {
        addFiles(f);
      }
    } else {
      String filename = file.getName().toLowerCase();
      // ===================================================
      // Only index text files
      // ===================================================
      if (filename.endsWith(".htm") || filename.endsWith(".html")
              || filename.endsWith(".xml") || filename.endsWith(".txt")) {
        queue.add(file);
      } else {
        System.out.println("Skipped " + filename);
      }
    }
  }

  /**
   * Close the index.
   *
   * @throws java.io.IOException
   *             when exception closing
   */
  public void closeIndex() throws IOException {
    writer.close();
  }
}
